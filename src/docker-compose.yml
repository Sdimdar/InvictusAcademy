version: '3.4'

services:
  sessionsdb:
    image: postgres
    container_name: sessionsdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - postgres_data:/var/lib/postgressql/sessionsData

  admindb:
    image: postgres
    container_name: admindb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - postgres_data:/var/lib/postgressql/adminData
  
  userdb:
    image: postgres
    container_name: userdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: UserDb
    restart: always
    volumes:
      - postgres_data:/var/lib/postgressql/userData

  requestdb:
    image: postgres
    container_name: requestdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: RequestDb
    restart: always
    volumes:
      - postgres_data:/var/lib/postgressql/requestData

  coursesdb:
    image: postgres
    container_name: coursesdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: CoursesDb
    restart: always
    volumes:
      - postgres_data:/var/lib/postgressql/coursesData

  invictus.pgadmin:
    container_name: invictus.pgadmin
    image: dpage/pgadmin4
    environment: 
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5051:80"
    volumes:
      - postgres_data:/pgadmindata

  coursesinfodb:
    image: mongo:latest
    command: mongod --auth
    container_name: coursesinfodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
  
  mongo-express-invuctus:
    image: mongo-express:latest
    container_name: mongo-express-invuctus
    restart: unless-stopped
    ports:
      - "8085:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: coursesinfodb
    depends_on:
      - coursesinfodb

  user-frontend:
    image: ${DOCKER_REGISTRY-}userfrontend
    build:
      context: Frontend/InvuctusAcademy
      dockerfile: Dockerfile
      args:
        GATEWAY: ${USER_GATEWAY}:8000
    container_name: user-frontend
    depends_on:
      - gateway.api
    ports:
      - "80:80"
  
  admin-frontend:
    image: ${DOCKER_REGISTRY-}adminfrontend
    build:
      context: Frontend/InvictusAdmin
      dockerfile: Dockerfile
      args:
        GATEWAY: ${ADMIN_GATEWAY}:8001
    container_name: admin-frontend
    depends_on:
      - admingateway.api
    ports:
      - "8080:80"

  gateway.api:
    image: ${DOCKER_REGISTRY-}gatewayapi
    build:
      context: .
      dockerfile: Gateway/UserGateway/UserGateway.API/Dockerfile
    container_name: gateway.api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - "ConnectionStrings:SessionConnectionString=Server=sessionsdb;Port=5432;UserId=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
      - "ApiSettings:IdentityUrl=http://user.api"
      - "ApiSettings:RequestUrl=http://request.api"
      - "ApiSettings:CourseUrl=http://courses.api"
    depends_on:
      - sessionsdb
      - user.api
      - courses.api
      - request.api
    ports: 
      - "8000:80"

  admingateway.api:
    image: ${DOCKER_REGISTRY-}admingatewayapi
    build:
      context: .
      dockerfile: Gateway/AdminGateway.MVC/Dockerfile
    container_name: admingateway.api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - "ConnectionStrings:AdminConnection=Server=admindb;Port=5432;Database=AdminDb;UserId=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
      - "ApiSettings:IdentityUrl=http://user.api"
      - "ApiSettings:RequestUrl=http://request.api"
      - "ApiSettings:CourseUrl=http://courses.api"
    depends_on:
      - admindb
      - user.api
      - courses.api
      - request.api
    ports: 
      - "8001:80"
  
  user.api:
    image: ${DOCKER_REGISTRY-}userapi
    build:
      context: .
      dockerfile: Services/User/User.API/Dockerfile
    container_name: user.api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - "ConnectionStrings:UserConnectionString=Server=userdb;Port=5432;Database=UserDb;UserId=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
    depends_on:
      - userdb

  request.api:
    image: ${DOCKER_REGISTRY-}requestapi
    build:
      context: .
      dockerfile: Services/Request/Request.API/Dockerfile
    container_name: request.api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - "ConnectionStrings:RequestConnectionString=Server=requestdb;Port=5432;Database=RequestDb;UserId=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
    depends_on:
      - requestdb

  courses.api:
    image: ${DOCKER_REGISTRY-}coursesapi
    build:
      context: .
      dockerfile: Services/Courses/Courses.API/Dockerfile
    container_name: courses.api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - "ConnectionStrings:CoursesConnectionString=Server=coursesdb;Port=5432;Database=CoursesDb;UserId=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};"
      - "InvictusAcademyDatabase:ConnectionString=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@coursesinfodb"
      - "DatabaseName=InvictusAcademy"
    depends_on:
      - coursesdb
      - coursesinfodb

volumes:
  postgres_data:
  mongo_data:    